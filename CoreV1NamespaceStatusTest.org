# -*- ii: apisnoop; -*-
#+TITLE: Write CoreV1NamespaceStatus Test - +2
#+AUTHOR: ii team
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | DONE(d)
#+OPTIONS: toc:nil tags:nil todo:nil
#+EXPORT_SELECT_TAGS: export
#+PROPERTY: header-args:sql-mode :product postgres


* TODO Progress [6/6] :export:
- [X] APISnoop org-flow: [[https://github.com/apisnoop/ticket-writing/blob/master/CoreV1NamespacedStatusTest.org][CoreV1NamespaceStatusTest.org]]
- [X] test approval issue: [[https://issues.k8s.io/109762][#109762]]
- [X] test pr: [[https://pr.k8s.io/109763][#109763]]
- [X] two weeks soak start date: [[https://testgrid.k8s.io/sig-api-machinery-gce-gke#gce-serial&width=20&graph-metrics=test-duration-minutes&include-filter-by-regex=should.apply.changes.to.a.namespace.status][20 July 2022]]
- [X] two weeks soak end date: 1 August 2022
- [X] test promotion pr: [[https://pr.k8s.io/111522][#111522]]

* Identifying an untested feature Using APISnoop                     :export:

According to this APIsnoop query, there is still some remaining NamespaceStatus endpoints which are untested.

  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode :eval never-export :exports both :session none
    SELECT
      endpoint,
      path,
      kind
      FROM testing.untested_stable_endpoint
      where eligible is true
      and endpoint ilike '%NamespaceStatus'
      order by kind, endpoint desc
      limit 10;
  #+end_src

  #+RESULTS: untested_stable_core_endpoints
  #+begin_SRC example
             endpoint           |               path               |   kind
  ------------------------------+----------------------------------+-----------
   replaceCoreV1NamespaceStatus | /api/v1/namespaces/{name}/status | Namespace
   readCoreV1NamespaceStatus    | /api/v1/namespaces/{name}/status | Namespace
   patchCoreV1NamespaceStatus   | /api/v1/namespaces/{name}/status | Namespace
  (3 rows)

  #+end_SRC

* API Reference and feature documentation :export:
- [[https://kubernetes.io/docs/reference/kubernetes-api/][Kubernetes API Reference Docs]]
- [[https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/][Kubernetes API / Cluster Resources / Namespace]]
- [[https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/namespace.go][client-go - Namespace]]

* Test Outline :export:

#+begin_src
Feature: Test read and patch NamespaceStatus api endpoints
#+end_src

- readCoreV1NamespaceStatus

#+begin_src
Scenario: the test reads a NamespaceStatus
  Given the e2e test has created a namespace
  When the test reads the NamespaceStatus
  Then the requested action is accepted without any error
  And the NamespaceStatus phase is active
#+end_src

- patchCoreV1NamespaceStatus

#+begin_src
Scenario: the test patches a NamespaceStatus
  Given the e2e test has a namespace
  And a patched status condition is created
  When the test patches the NamespaceStatus
  Then the requested action is accepted without any error
  And the newly applied status condition is found
#+end_src

* E2E Test :export:

Using a number of existing e2e test practices a new [[https://github.com/ii/kubernetes/blob/create-namespace-status-test/test/e2e/apimachinery/namespace.go#L285-L328][ginkgo test]] has been created for 2 namespace status endpoints.
The e2e logs for this test are listed below.

#+begin_src
[It] should apply changes to a namespace status
  /home/ii/go/src/k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:285
STEP: Read namespace status
May  3 09:59:50.308: INFO: status: v1.NamespaceStatus{Phase:"Active", Conditions:[]v1.NamespaceCondition(nil)}
STEP: Patch namespace status
May  3 09:59:50.313: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from an e2e test"}
#+end_src

* Verifying increase in coverage with APISnoop :export:
** Listing endpoints hit by the new e2e test

This query shows the endpoints hit within a short period of running the e2e test

#+begin_src sql-mode :eval never-export :exports both :session none
select distinct  endpoint, right(useragent,42) AS useragent
from testing.audit_event
where endpoint ilike '%NamespaceStatus'
and release_date::BIGINT > round(((EXTRACT(EPOCH FROM NOW()))::numeric)*1000,0) - 60000
and useragent like 'e2e%should%'
order by endpoint
limit 10;
#+end_src

#+RESULTS:
#+begin_SRC example
          endpoint          |                 useragent
----------------------------+--------------------------------------------
 patchCoreV1NamespaceStatus | should apply changes to a namespace status
 readCoreV1NamespaceStatus  | should apply changes to a namespace status
(2 rows)

#+end_SRC

* Final notes :export:

If a test with these calls gets merged, *test coverage will go up by 2 points*

This test is also created with the goal of conformance promotion.

-----  
/sig testing  

/sig architecture  

/area conformance  

* Options :neverexport:
** Delete all events after postgres initialization
   #+begin_src sql-mode :eval never-export :exports both :session none
   delete from audit_event where bucket = 'apisnoop' and job='live';
   #+end_src

