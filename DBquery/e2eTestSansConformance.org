#+Title: Finding e2e test to promote
Date: 30 Nov 2020

*** First find the list of tables
 #+BEGIN_SRC sql-mode
\dt+
 #+END_SRC

 #+RESULTS:
 #+begin_SRC example
                                               List of relations
  Schema |    Name     | Type  |  Owner   |  Size   |                       Description
 --------+-------------+-------+----------+---------+----------------------------------------------------------
  public | audit_event | table | apisnoop | 916 MB  | every event from an e2e test run, or multiple test runs.
  public | open_api    | table | apisnoop | 5096 kB | endpoint details from openAPI spec
 (2 rows)

 #+end_SRC



*** See what columns is in the tables
Open API
 #+BEGIN_SRC sql-mode
\d+ open_api
 #+END_SRC

 #+RESULTS:
 #+begin_SRC example
                                                                                Table "public.open_api"
     Column    |            Type             | Collation | Nullable | Default | Storage  | Stats target |                                 Description
 --------------+-----------------------------+-----------+----------+---------+----------+--------------+-----------------------------------------------------------------------------
  release      | text                        |           | not null |         | extended |              | kubernetes release of this spec
  release_date | timestamp without time zone |           |          |         | plain    |              | canonical release date for k8s release
  endpoint     | text                        |           | not null |         | extended |              | kubernetes endpoint, the operation_id in the spec
  level        | text                        |           |          |         | extended |              | alpha, beta, or stable
  category     | text                        |           |          |         | extended |              | endpoint category, roughly its group, taken from the first tag in the spec.
  path         | text                        |           |          |         | extended |              | the http path of the endpoint
  k8s_group    | text                        |           |          |         | extended |              | k8s group for endpoint
  k8s_version  | text                        |           |          |         | extended |              | k8s version for endpoint
  k8s_kind     | text                        |           |          |         | extended |              | k8s kind  for endpoint
  k8s_action   | text                        |           |          |         | extended |              | endpoint action, roughly related to an http method
  deprecated   | boolean                     |           |          |         | plain    |              | is endpoint marked as deprecated?
  description  | text                        |           |          |         | extended |              | description of endpoint
  spec         | text                        |           |          |         | extended |              | the source for this open api spec, taken from github.
 Indexes:
     "open_api_pkey" PRIMARY KEY, btree (release, endpoint)
 Access method: heap

 #+end_SRC



Open Audit Event
 #+BEGIN_SRC sql-mode
\d+ audit_event
 #+END_SRC

 #+RESULTS:
 #+begin_SRC example
                                                                                     Unlogged table "public.audit_event"
     Column     |            Type             | Collation | Nullable |             Default              | Storage  | Stats target |                               Description
 ---------------+-----------------------------+-----------+----------+----------------------------------+----------+--------------+-------------------------------------------------------------------------
  release       | text                        |           |          |                                  | extended |              | release this test suite was run for
  release_date  | text                        |           |          |                                  | extended |              | canonical release date (or test run date if version not released yet
  audit_id      | text                        |           | not null |                                  | extended |              | audit event id as given in log.  Note these are not necessarily unique.
  endpoint      | text                        |           |          |                                  | extended |              | endpoint hit by this audit event
  useragent     | text                        |           |          |                                  | extended |              | useragent of the event, taken from events request header
  test          | text                        |           |          |                                  | extended |              | the test codename if it can be extracted from useragent, else null
  test_hit      | boolean                     |           |          |                                  | plain    |              | is the useragent of the event a test?
  conf_test_hit | boolean                     |           |          |                                  | plain    |              | is the useragent of the event a conformance test?
  data          | jsonb                       |           | not null |                                  | extended |              | the full json of the audit event
  source        | text                        |           |          |                                  | extended |              | url of the bucket where the test run logs are stored
  id            | integer                     |           | not null | generated by default as identity | plain    |              | generated id, this will be unique
  ingested_at   | timestamp without time zone |           |          | CURRENT_TIMESTAMP                | plain    |              | the time at which the audit_event was added to this table
 Indexes:
     "audit_event_pkey" PRIMARY KEY, btree (id)
 Access method: heap

 #+end_SRC

*** Conclusion:
Table "public.audit_event" contain the Endpoint, test_hit and conf_test_hit.
Result should show the endpoint where test_hit = True and conf_test_hit = False

A further query could show the e2e test and go file containing the test.

*** Step 1 - Find endpoints with e2e tests and not Conformance test
public.audit_event"

#+begin_src sql-mode
   select distinct endpoint, test_hit,conf_test_hit from public.audit_event
    where test_hit = 'true'
     and conf_test_hit = 'false'
       and endpoint not like '%alpha%'
       and endpoint not like '%beta%';



#+end_src

#+RESULTS:
#+begin_SRC example
                        endpoint                        | test_hit | conf_test_hit
--------------------------------------------------------+----------+---------------
 createRbacAuthorizationV1NamespacedRole                | t        | f
 deleteCoreV1PersistentVolume                           | t        | f
 deleteCoreV1NamespacedServiceAccount                   | t        | f
 replaceAppsV1NamespacedStatefulSet                     | t        | f
 createCoreV1NamespacedResourceQuota                    | t        | f
 listNetworkingV1NetworkPolicyForAllNamespaces          | t        | f
 connectCoreV1GetNodeProxyWithPath                      | t        | f
 listStorageV1StorageClass                              | t        | f
 deleteCertificatesV1CertificateSigningRequest          | t        | f
 listNetworkingV1NamespacedNetworkPolicy                | t        | f
 readCoreV1NamespacedServiceAccount                     | t        | f
 readStorageV1StorageClass                              | t        | f
 deleteAppsV1NamespacedDeployment                       | t        | f
 deleteCoreV1NamespacedService                          | t        | f
 getNodeV1APIResources                                  | t        | f
 createCoreV1NamespacedPersistentVolumeClaim            | t        | f
 patchCoreV1Node                                        | t        | f
 readStorageV1VolumeAttachment                          | t        | f
 createCoreV1PersistentVolume                           | t        | f
 getApiregistrationV1APIResources                       | t        | f
 listCoreV1Node                                         | t        | f
 patchNetworkingV1NamespacedNetworkPolicy               | t        | f
 deleteAppsV1NamespacedStatefulSet                      | t        | f
 replaceCoreV1NamespacedEndpoints                       | t        | f
 readNetworkingV1NamespacedNetworkPolicy                | t        | f
 deleteStorageV1CSIDriver                               | t        | f
 getAuthenticationV1APIResources                        | t        | f
 readAppsV1NamespacedStatefulSet                        | t        | f
 readNodeV1RuntimeClass                                 | t        | f
 listCoreV1NamespacedPod                                | t        | f
 getAPIVersions                                         | t        | f
 createRbacAuthorizationV1ClusterRoleBinding            | t        | f
 listCoreV1PersistentVolume                             | t        | f
 createCoreV1NamespacedPod                              | t        | f
 replaceCoreV1NamespacedResourceQuota                   | t        | f
 getCoreV1APIResources                                  | t        | f
 createApiextensionsV1CustomResourceDefinition          | t        | f
 replaceAppsV1NamespacedDeployment                      | t        | f
 logFileListHandler                                     | t        | f
 deleteCoreV1NamespacedPod                              | t        | f
 createNetworkingV1NamespacedNetworkPolicy              | t        | f
 deleteRbacAuthorizationV1ClusterRoleBinding            | t        | f
 deleteCoreV1NamespacedResourceQuota                    | t        | f
 deleteCoreV1Namespace                                  | t        | f
 createCoreV1NamespacedConfigMap                        | t        | f
 getAutoscalingV1APIResources                           | t        | f
 readCoordinationV1NamespacedLease                      | t        | f
 createStorageV1StorageClass                            | t        | f
 createCoreV1NamespacedEndpoints                        | t        | f
 readCertificatesV1CertificateSigningRequest            | t        | f
 createCoreV1NamespacedPodTemplate                      | t        | f
 deleteCoreV1NamespacedEndpoints                        | t        | f
 getCoreAPIVersions                                     | t        | f
 createCoreV1Namespace                                  | t        | f
 deleteBatchV1NamespacedJob                             | t        | f
 listCoreV1NamespacedServiceAccount                     | t        | f
 replaceCoreV1NamespacedServiceAccount                  | t        | f
 listCoreV1Namespace                                    | t        | f
 connectCoreV1GetNamespacedPodProxyWithPath             | t        | f
 readStorageV1CSINode                                   | t        | f
 connectCoreV1GetNamespacedPodPortforward               | t        | f
 replaceCoreV1NamespacedConfigMap                       | t        | f
 createCoreV1NamespacedSecret                           | t        | f
 getCoordinationV1APIResources                          | t        | f
 getAppsV1APIResources                                  | t        | f
 listAppsV1NamespacedReplicaSet                         | t        | f
 createAppsV1NamespacedDeployment                       | t        | f
 createCoreV1NamespacedReplicationController            | t        | f
 readCoreV1NamespacedPodLog                             | t        | f
 listCoreV1NamespacedPersistentVolumeClaim              | t        | f
 deleteNetworkingV1NamespacedNetworkPolicy              | t        | f
 createStorageV1CSIDriver                               | t        | f
 listAppsV1NamespacedStatefulSet                        | t        | f
 listCoreV1NamespacedEndpoints                          | t        | f
 createCoreV1NamespacedPodEviction                      | t        | f
 readCoreV1Node                                         | t        | f
 getBatchV1APIResources                                 | t        | f
 readCoreV1NamespacedSecret                             | t        | f
 getAuthorizationV1APIResources                         | t        | f
 readCoreV1NamespacedResourceQuota                      | t        | f
 replaceCertificatesV1CertificateSigningRequestApproval | t        | f
 listCoordinationV1NamespacedLease                      | t        | f
 replaceCoreV1NamespacedPersistentVolumeClaim           | t        | f
 deleteApiextensionsV1CustomResourceDefinition          | t        | f
 readCoreV1PersistentVolume                             | t        | f
 createAuthorizationV1SubjectAccessReview               | t        | f
 deleteRbacAuthorizationV1NamespacedRole                | t        | f
 listCoreV1NamespacedReplicationController              | t        | f
 deleteNetworkingV1CollectionNamespacedNetworkPolicy    | t        | f
 replaceCoreV1Node                                      | t        | f
 listCoreV1NamespacedPodTemplate                        | t        | f
 deleteRbacAuthorizationV1ClusterRole                   | t        | f
 listCoreV1NamespacedService                            | t        | f
 readCoreV1NamespacedConfigMap                          | t        | f
 listAppsV1NamespacedDeployment                         | t        | f
 readCoreV1NamespacedPersistentVolumeClaim              | t        | f
 patchCoreV1NamespacedPodStatus                         | t        | f
 replaceCoreV1NamespacedSecret                          | t        | f
 createCoreV1NamespacedServiceAccount                   | t        | f
 listCoreV1NamespacedResourceQuota                      | t        | f
 createAppsV1NamespacedReplicaSet                       | t        | f
 getEventsV1APIResources                                | t        | f
 readBatchV1NamespacedJob                               | t        | f
 listAppsV1NamespacedDaemonSet                          | t        | f
 createCertificatesV1CertificateSigningRequest          | t        | f
 createBatchV1NamespacedJob                             | t        | f
 deleteCoreV1NamespacedConfigMap                        | t        | f
 readCoreV1NamespacedReplicationController              | t        | f
 readAppsV1NamespacedReplicaSet                         | t        | f
 getStorageV1APIResources                               | t        | f
 connectCoreV1PostNamespacedPodExec                     | t        | f
 readCoreV1NamespacedReplicationControllerScale         | t        | f
 getApiextensionsV1APIResources                         | t        | f
 getCertificatesV1APIResources                          | t        | f
 listRbacAuthorizationV1ClusterRole                     | t        | f
 getNetworkingV1APIResources                            | t        | f
 deleteCoreV1NamespacedPersistentVolumeClaim            | t        | f
 createAppsV1NamespacedStatefulSet                      | t        | f
 deleteRbacAuthorizationV1NamespacedRoleBinding         | t        | f
 deleteCoreV1NamespacedReplicationController            | t        | f
 createRbacAuthorizationV1ClusterRole                   | t        | f
 replaceNetworkingV1NamespacedNetworkPolicy             | t        | f
 readCoreV1NamespacedEndpoints                          | t        | f
 replaceCoreV1NamespacedReplicationControllerScale      | t        | f
 getAdmissionregistrationV1APIResources                 | t        | f
 replaceCoreV1NamespacedReplicationController           | t        | f
 createCoreV1NamespacedService                          | t        | f
 readCoreV1NamespacedPod                                | t        | f
 listBatchV1NamespacedJob                               | t        | f
 readAppsV1NamespacedDeployment                         | t        | f
 deleteNodeV1RuntimeClass                               | t        | f
 deleteStorageV1StorageClass                            | t        | f
 replaceCoreV1NamespacedPod                             | t        | f
 replaceCoreV1NamespacedService                         | t        | f
 getRbacAuthorizationV1APIResources                     | t        | f
 getNetworkingAPIGroup                                  | t        | f
 replaceAppsV1NamespacedReplicaSet                      | t        | f
 readStorageV1CSIDriver                                 | t        | f
 createRbacAuthorizationV1NamespacedRoleBinding         | t        | f
 listCoreV1PodForAllNamespaces                          | t        | f
 getSchedulingV1APIResources                            | t        | f
 deleteCoreV1NamespacedSecret                           | t        | f
 createNodeV1RuntimeClass                               | t        | f
 readCoreV1NamespacedService                            | t        | f
(144 rows)

#+end_SRC

*** Step 2 Find the test name for the e2e tests from Step 1


#+begin_src sql-mode
   select distinct endpoint, test_hit,conf_test_hit, test from public.audit_event
    where test_hit = 'true'
     and conf_test_hit = 'false'
     and endpoint like '%Core%'
       and endpoint not like '%Proxy%'
       and test not like '%storage%'
       and test not like '%volume%'
       and endpoint not like '%alpha%'
       and endpoint not like '%beta%' limit 100;



#+end_src

#+RESULTS:
#+begin_SRC example
                 endpoint                 | test_hit | conf_test_hit |                                                                                          test
------------------------------------------+----------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 connectCoreV1GetNamespacedPodPortforward | t        | f             | [sig-cli] Kubectl Port forwarding With a server listening on 0.0.0.0 should support forwarding over websockets
 connectCoreV1GetNamespacedPodPortforward | t        | f             | [sig-cli] Kubectl Port forwarding With a server listening on localhost should support forwarding over websockets
 connectCoreV1PostNamespacedPodExec       | t        | f             | [k8s.io] PrivilegedPod [NodeConformance] should enable privileged commands [LinuxOnly]
 connectCoreV1PostNamespacedPodExec       | t        | f             | [k8s.io] [sig-node] Mount propagation should propagate mounts to the host
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] DNS should support configurable pod resolv.conf
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should be able to handle large requests: http
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should be able to handle large requests: udp
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for client IP based session affinity: http [LinuxOnly]
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for client IP based session affinity: udp [LinuxOnly]
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for endpoint-Service: http
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for endpoint-Service: udp
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for multiple endpoint-Services with same selector
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for node-Service: http
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for node-Service: udp
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for pod-Service: http
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for pod-Service: udp
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should function for service endpoints using hostNetwork
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should support basic nodePort: udp functionality
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should update endpoints: http
 connectCoreV1PostNamespacedPodExec       | t        | f             | [sig-network] Networking Granular Checks: Services should update endpoints: udp
 createCoreV1Namespace                    | t        | f             | [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set [NodeConformance]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull from private registry with secret [NodeConformance]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull image [NodeConformance]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Container Runtime blackbox test when running a container with a new image should not be able to pull from private registry without secret [NodeConformance]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Container Runtime blackbox test when running a container with a new image should not be able to pull image from invalid registry [NodeConformance]
 createCoreV1Namespace                    | t        | f             | [k8s.io] NodeLease when the NodeLease feature is enabled should have OwnerReferences set
 createCoreV1Namespace                    | t        | f             | [k8s.io] NodeLease when the NodeLease feature is enabled the kubelet should create and update a lease in the kube-node-lease namespace
 createCoreV1Namespace                    | t        | f             | [k8s.io] NodeLease when the NodeLease feature is enabled the kubelet should report node status infrequently
 createCoreV1Namespace                    | t        | f             | [k8s.io] Pods should support pod readiness gates [NodeFeature:PodReadinessGate]
 createCoreV1Namespace                    | t        | f             | [k8s.io] PrivilegedPod [NodeConformance] should enable privileged commands [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Probing container should be restarted by liveness probe after startup probe enables it
 createCoreV1Namespace                    | t        | f             | [k8s.io] Probing container should be restarted startup probe fails
 createCoreV1Namespace                    | t        | f             | [k8s.io] Probing container should be restarted with a docker exec liveness probe with timeout
 createCoreV1Namespace                    | t        | f             | [k8s.io] Probing container should be restarted with a local redirect http liveness probe
 createCoreV1Namespace                    | t        | f             | [k8s.io] Probing container should not be ready until startupProbe succeeds
 createCoreV1Namespace                    | t        | f             | [k8s.io] Probing container should not be ready with a docker exec readiness probe timeout
 createCoreV1Namespace                    | t        | f             | [k8s.io] Probing container should *not* be restarted by liveness probe because startup probe delays it
 createCoreV1Namespace                    | t        | f             | [k8s.io] Probing container should *not* be restarted with a non-local redirect http liveness probe
 createCoreV1Namespace                    | t        | f             | [k8s.io] Security Context When creating a container with runAsNonRoot should not run with an explicit root user ID [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Security Context When creating a container with runAsNonRoot should not run without a specified user ID
 createCoreV1Namespace                    | t        | f             | [k8s.io] Security Context When creating a container with runAsNonRoot should run with an explicit non-root user ID [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Security Context When creating a container with runAsNonRoot should run with an image specified user ID
 createCoreV1Namespace                    | t        | f             | [k8s.io] Security Context When creating a container with runAsUser should run the container with uid 0 [LinuxOnly] [NodeConformance]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Security Context When creating a pod with privileged should run the container as privileged when true [LinuxOnly] [NodeFeature:HostAccess]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with readonly rootfs when readOnlyRootFilesystem=true [LinuxOnly] [NodeConformance]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when not explicitly set and uid != 0 [LinuxOnly] [NodeConformance]
 createCoreV1Namespace                    | t        | f             | [k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when true [LinuxOnly] [NodeConformance]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] AppArmor load AppArmor profiles can disable an AppArmor profile, using unconfined
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] AppArmor load AppArmor profiles should enforce an AppArmor profile
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] crictl should be able to run crictl on the node
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] kubelet [k8s.io] [sig-node] Clean up pods on node kubelet should be able to delete 10 pods per node in 1m0s.
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Mount propagation should propagate mounts to the host
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] NodeProblemDetector [DisabledForLargeClusters] should run without error
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Pods Extended [k8s.io] Delete Grace Period should be submitted and removed
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Pods Extended [k8s.io] Pod Container lifecycle should not create extra sandbox if all containers are done
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Pods Extended [k8s.io] Pod Container Status should never report success for a pending container
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] PreStop graceful pod terminated should wait until preStop hook completes the process
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Security Context should support container.SecurityContext.RunAsUser [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.SupplementalGroups [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Security Context should support seccomp default which is unconfined [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Security Context should support seccomp runtime/default [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Security Context should support seccomp unconfined on the container [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] Security Context should support seccomp unconfined on the pod [LinuxOnly]
 createCoreV1Namespace                    | t        | f             | [k8s.io] [sig-node] SSH should SSH to all nodes and run commands
 createCoreV1Namespace                    | t        | f             | [k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should not launch unsafe, but not explicitly enabled sysctls on the node
 createCoreV1Namespace                    | t        | f             | [k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should reject invalid sysctls
 createCoreV1Namespace                    | t        | f             | [k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should support sysctls
 createCoreV1Namespace                    | t        | f             | [k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should support unsafe sysctls which are actually whitelisted
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] API priority and fairness should ensure that requests can be classified by testing flow-schemas/priority-levels
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] API priority and fairness should ensure that requests can't be drowned out (fairness)
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] API priority and fairness should ensure that requests can't be drowned out (priority)
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Garbage collector should delete jobs and pods created by cronjob
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Garbage collector should orphan pods created by rc if deleteOptions.OrphanDependents is nil
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Garbage collector should support cascading deletion of custom resources
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Garbage collector should support orphan deletion of custom resources
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Generated clientset should create pods, set the deletionTimestamp and deletionGracePeriodSeconds of the pod
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Generated clientset should create v1beta1 cronJobs, delete cronJobs, watch cronJobs
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] health handlers should contain necessary checks
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a custom resource.
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Servers with support for Table transformation should return chunks of table results for list calls
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Servers with support for Table transformation should return generic metadata details across all namespaces for nodes
 createCoreV1Namespace                    | t        | f             | [sig-api-machinery] Servers with support for Table transformation should return pod details
 createCoreV1Namespace                    | t        | f             | [sig-apps] CronJob should be able to schedule after more than 100 missed schedule
 createCoreV1Namespace                    | t        | f             | [sig-apps] CronJob should delete failed finished jobs with limit of one job
 createCoreV1Namespace                    | t        | f             | [sig-apps] CronJob should delete successful finished jobs with limit of one successful job
 createCoreV1Namespace                    | t        | f             | [sig-apps] CronJob should not emit unexpected warnings
 createCoreV1Namespace                    | t        | f             | [sig-apps] CronJob should remove from active list jobs that have been deleted
 createCoreV1Namespace                    | t        | f             | [sig-apps] CronJob should replace jobs when ReplaceConcurrent
 createCoreV1Namespace                    | t        | f             | [sig-apps] CronJob should schedule multiple jobs concurrently
 createCoreV1Namespace                    | t        | f             | [sig-apps] Deployment deployment reaping should cascade to its replica sets and pods
 createCoreV1Namespace                    | t        | f             | [sig-apps] Deployment iterative rollouts should eventually progress
 createCoreV1Namespace                    | t        | f             | [sig-apps] Deployment should not disrupt a cloud load-balancer's connectivity during rollout
 createCoreV1Namespace                    | t        | f             | [sig-apps] Deployment test Deployment ReplicaSet orphaning and adoption regarding controllerRef
 createCoreV1Namespace                    | t        | f             | [sig-apps] DisruptionController evictions: enough pods, absolute => should allow an eviction
 createCoreV1Namespace                    | t        | f             | [sig-apps] DisruptionController evictions: enough pods, replicaSet, percentage => should allow an eviction
 createCoreV1Namespace                    | t        | f             | [sig-apps] DisruptionController evictions: maxUnavailable allow single eviction, percentage => should allow an eviction
(100 rows)

#+end_SRC





*** Step 3 Find the .go file for each test from step 2





*** Check which test hit and endpoint from Step 1
#+begin_src sql-mode
  select endpoint, conf_test_hit, useragent
    from open_api
         Left join audit_event using(endpoint)
   where endpoint like 'replaceCoreV1NamespacedServiceAccount'
       and useragent not like '%storage%'
  --   and category = 'core'
   group by endpoint, conf_test_hit, useragent;




#+end_SRC

#+RESULTS:
#+begin_SRC example
               endpoint                | conf_test_hit |                                                        useragent
---------------------------------------+---------------+-------------------------------------------------------------------------------------------------------------------------
 replaceCoreV1NamespacedServiceAccount | f             | e2e.test/v1.20.0 (linux/amd64) kubernetes/e3de622 -- [sig-auth] ServiceAccounts should ensure a single API token exists
 replaceCoreV1NamespacedServiceAccount | f             | kube-controller-manager/v1.20.0 (linux/amd64) kubernetes/e3de622/tokens-controller
(2 rows)

#+end_SRC


























































*** Step 3 Find the .go file for each test from step 2
