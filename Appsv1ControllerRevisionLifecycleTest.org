# -*- ii: apisnoop; -*-
#+TITLE: AppsV1 Controller Revision lifecycle Test
#+AUTHOR: ii team
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | DONE(d)
#+OPTIONS: toc:nil tags:nil todo:nil
#+EXPORT_SELECT_TAGS: export
#+PROPERTY: header-args:sql-mode :product postgres


* TODO Progress [1/6]                                                :export:
- [X] APISnoop org-flow: [[https://github.com/apisnoop/ticket-writing/blob/master/Appsv1ControllerRevisionLifecycleTest.org][Appsv1ControllerRevisionLifecycleTest.org]]
- [ ] Test approval issue: [[https://issues.k8s.io/][#]]
- [ ] Test PR: [[https://pr.k8s.io/][!]]
- [ ] Two weeks soak start date: [[https://testgrid.k8s.io/][testgrid-link]]
- [ ] Two weeks soak end date:
- [ ] Test promotion PR: [[https://pr.k8s.io/][!]]

* Identifying an untested feature Using APISnoop                     :export:

According to this APIsnoop query, there are still some remaining Controller Revision endpoints which are untested.

  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode :eval never-export :exports both :session none
    SELECT
      endpoint,
      path,
      kind
      FROM testing.untested_stable_endpoint
      where eligible is true
      and endpoint ilike '%ControllerRevision%'
      order by kind, endpoint desc
      limit 10;
  #+end_src

  #+RESULTS: untested_stable_core_endpoints
  #+begin_SRC example
                        endpoint                      |                              path                               |        kind
  ----------------------------------------------------+-----------------------------------------------------------------+--------------------
   replaceAppsV1NamespacedControllerRevision          | /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name} | ControllerRevision
   readAppsV1NamespacedControllerRevision             | /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name} | ControllerRevision
   patchAppsV1NamespacedControllerRevision            | /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name} | ControllerRevision
   listAppsV1ControllerRevisionForAllNamespaces       | /apis/apps/v1/controllerrevisions                               | ControllerRevision
   deleteAppsV1NamespacedControllerRevision           | /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name} | ControllerRevision
   deleteAppsV1CollectionNamespacedControllerRevision | /apis/apps/v1/namespaces/{namespace}/controllerrevisions        | ControllerRevision
   createAppsV1NamespacedControllerRevision           | /apis/apps/v1/namespaces/{namespace}/controllerrevisions        | ControllerRevision
  (7 rows)

  #+end_SRC

* API Reference and feature documentation                            :export:
- [[https://kubernetes.io/docs/reference/kubernetes-api/][Kubernetes API Reference Docs]]
- [[https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/controller-revision-v1/][Kubernetes API > Workload Resources > Controller Revision]]
- [[https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/apps/v1/controllerrevision.go#L42-L54][client-go: apps/v1/controllerrevision.go]]

* Research                                                           :export:

Diary notes: [[https://github.com/apisnoop/ticket-writing/blob/diary/diary/controllerrevision.org][Conformance testing Controller Revision endpoints]]

* The mock test                                                      :export:
** Test outline (WIP)

Note: The outline covers the following endpoints only; =listAppsV1ControllerRevisionForAllNamespaces=, =readAppsV1NamespacedControllerRevision=

1. Create a daemon set with a static label. Confirm that the pods are running.

2. Record the list all controller revisions in the cluster, filtered by the static label.

3. Confirm that the controller revision for the current daemon set has been found.

4. Confirm that the revision =read= for each matching controller revision is not =nil=.

** Test the functionality in Go

Exploratory e2e test code: [[https://github.com/ii/kubernetes/blob/controller-revisions/test/e2e/apps/controller_revision.go][ii/kubernetes.../apps/controller_revision.go]]

* Verifying increase in coverage with APISnoop                       :export:
** Listing endpoints hit by the new e2e test

This query shows the following endpoints are hit within a short period of running this e2e test

#+begin_src sql-mode :eval never-export :exports both :session none
select distinct  endpoint, right(useragent,58) AS useragent
from testing.audit_event
where endpoint ilike '%ControllerRevision%'
and release_date::BIGINT > round(((EXTRACT(EPOCH FROM NOW()))::numeric)*1000,0) - 60000
and useragent like 'e2e%should%'
order by endpoint
limit 10;
#+end_src

#+RESULTS:
#+begin_SRC example
                   endpoint                   |                         useragent
----------------------------------------------+------------------------------------------------------------
 listAppsV1ControllerRevisionForAllNamespaces | [Serial] should test the lifecycle of a ControllerRevision
 readAppsV1NamespacedControllerRevision       | [Serial] should test the lifecycle of a ControllerRevision
(2 rows)

#+end_SRC

* Final notes                                                        :export:

If a test with these calls gets merged, *test coverage will go up by x points*

This test is also created with the goal of conformance promotion.

-----  
/sig testing

/sig architecture  

/area conformance  

* Options                                                       :neverexport:
** Delete all events after postgres initialization
   #+begin_src sql-mode :eval never-export :exports both :session none
   delete from audit_event where bucket = 'apisnoop' and job='live';
   #+end_src

