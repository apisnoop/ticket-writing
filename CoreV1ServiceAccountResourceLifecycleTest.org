# -*- ii: apisnoop; -*-
#+TITLE: Mock Ticket Template
#+AUTHOR: ii team
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | DONE(d)
#+OPTIONS: toc:nil tags:nil todo:nil
#+EXPORT_SELECT_TAGS: export
* TODO Progress [0/4] :export:
- [X] APISnoop org-flow : [[https://github.com/cncf/apisnoop/blob/master/tickets/k8s/CoreV1ServiceAccountResourceLifecycleTest.org][CoreV1ServiceAccountResourceLifecycleTest.org]]
- [X] test approval issue : [[https://github.com/kubernetes/kubernetes/issues/89071][kubernetes/kubernetes#89071]]
- [X] test pr : [[https://github.com/kubernetes/kubernetes/pull/90193][kuberenetes/kubernetes#90193]]
- [X] two weeks soak start date : 23/04/2020 NZDT
- [ ] two weeks soak end date : 07/05/2020 NZDT
- [ ] test promotion pr : [[https://github.com/kubernetes/kubernetes/pull/90390][kubernetes/kubernetes#90930]]
* TODO [0%] In-Cluster Setup                                    :neverexport:
  :PROPERTIES:
  :LOGGING:  nil
  :END:
** TODO Connect demo to right eye

   #+begin_src tmate :session foo:hello :eval never-export
     echo "What parts of Kubernetes do you depend on $USER?"
   #+end_src
** Tilt Up
   #+begin_src tmate :session foo:hello :eval never-export
     cd ~/apisnoop
     tilt up --host 0.0.0.0
   #+end_src
** TODO Verify Pods Running
   #+begin_src shell
     kubectl get pods
   #+end_src

   #+RESULTS:
   #+begin_example
   NAME                                    READY   STATUS    RESTARTS   AGE
   apisnoop-auditlogger-86dcf97749-nb2rp   1/1     Running   1          6d23h
   hasura-7c5775fc95-rmp28                 1/1     Running   1          6d23h
   kubemacs-0                              1/1     Running   1          6d23h
   pgadmin-78b7448594-bmvxl                1/1     Running   0          6d23h
   postgres-6dbf95b969-hpr7k               1/1     Running   0          6d23h
   webapp-5bd67b658b-fc6pr                 1/1     Running   0          6d23h
   #+end_example

** TODO Check it all worked

   #+begin_src sql-mode :results replace
     \d+
   #+end_src

   #+RESULTS:
   #+begin_SRC example
                                                                              List of relations
    Schema |               Name               |       Type        |  Owner   |  Size   |                                    Description                                    
   --------+----------------------------------+-------------------+----------+---------+-----------------------------------------------------------------------------------
    public | api_operation                    | view              | apisnoop | 0 bytes | 
    public | api_operation_material           | materialized view | apisnoop | 3056 kB | details on each operation_id as taken from the openAPI spec
    public | api_operation_parameter_material | materialized view | apisnoop | 5008 kB | the parameters for each operation_id in open API spec
    public | audit_event                      | view              | apisnoop | 0 bytes | a record for each audit event in an audit log
    public | bucket_job_swagger               | table             | apisnoop | 3128 kB | metadata for audit events  and their respective swagger.json
    public | endpoint_coverage                | view              | apisnoop | 0 bytes | the test hits and conformance test hits per operation_id & other useful details
    public | endpoint_coverage_material       | materialized view | apisnoop | 144 kB  | 
    public | endpoints_hit_by_new_test        | view              | apisnoop | 0 bytes | list endpoints hit during our live auditing alongside their current test coverage
    public | projected_change_in_coverage     | view              | apisnoop | 0 bytes | overview of coverage stats if the e2e suite included your tests
    public | raw_audit_event                  | table             | apisnoop | 4405 MB | a record for each audit event in an audit log
    public | stable_endpoint_stats            | view              | apisnoop | 0 bytes | coverage stats for entire test run, looking only at its stable endpoints
    public | tests                            | view              | apisnoop | 0 bytes | 
    public | untested_stable_core_endpoints   | view              | apisnoop | 0 bytes | list stable core endpoints not hit by any tests, according to their test run
    public | useragents                       | view              | apisnoop | 0 bytes | 
   (14 rows)

   #+end_SRC

** TODO Check current coverage
   #+NAME: stable endpoint stats
   #+begin_src sql-mode
     select * from stable_endpoint_stats where job != 'live';
   #+end_src

   #+RESULTS: stable endpoint stats
   #+begin_SRC example
            job         |    date    | total_endpoints | test_hits | conf_hits | percent_tested | percent_conf_tested 
   ---------------------+------------+-----------------+-----------+-----------+----------------+---------------------
    1237451264262934532 | 2020-03-10 |             445 |       195 |       140 |          43.82 |               31.46
   (1 row)

   #+end_SRC

* Identifying an untested feature Using APISnoop                     :export:

According to this APIsnoop query, there are still some remaining ServiceAccount endpoints which are untested.

  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode :eval never-export :exports both :session none
    SELECT
      operation_id,
      -- k8s_action,
      -- path,
      -- description,
      kind
      FROM untested_stable_core_endpoints
      where path not like '%volume%'
      and kind like 'ServiceAccount'
      -- and operation_id ilike '%%'
     ORDER BY kind,operation_id desc
     -- LIMIT 25
           ;
  #+end_src
  
 #+RESULTS: untested_stable_core_endpoints
 #+begin_SRC example
                   operation_id                  |      kind      
 ------------------------------------------------+----------------
  patchCoreV1NamespacedServiceAccount            | ServiceAccount
  listCoreV1ServiceAccountForAllNamespaces       | ServiceAccount
  deleteCoreV1CollectionNamespacedServiceAccount | ServiceAccount
 (3 rows)

 #+end_SRC

* API Reference and feature documentation                            :export:
- [[https://kubernetes.io/docs/reference/kubernetes-api/][Kubernetes API Reference Docs]]
- [[https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/ServiceAccount.go][client-go - ServiceAccount]]
- [[https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/secret.go][client-go - Secret]]
- [[https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api/authentication/v1/types.go][authentication types]] 

* The mock test                                                      :export:
** Test outline
1. Create a ServiceAccount with a static label

2. Create a Secret

3. Patch the ServiceAccount with a new Label and a new Secret

4. Get the ServiceAccount to ensure it's patched

5. Create a ServiceAccountToken

6. List all ServiceAccounts in all Namespaces
   find the ServiceAccount(1)
   ensure that the ServiceAccount is found and is patched

7. Delete Namespaced ServiceAccount(1) via a Collection with a LabelSelector

8. Delete the Secret

** Test the functionality in Go
   #+begin_src go
     package main

     import (
       "encoding/json"
       "fmt"
       "flag"
       "os"
       v1 "k8s.io/api/core/v1"
       // "k8s.io/client-go/dynamic"
       // "k8s.io/apimachinery/pkg/runtime/schema"
       authenticationv1 "k8s.io/api/authentication/v1"
       metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
       "k8s.io/client-go/kubernetes"
       "k8s.io/apimachinery/pkg/types"
       "k8s.io/client-go/tools/clientcmd"
     )

     func main() {
       // uses the current context in kubeconfig
       kubeconfig := flag.String("kubeconfig", fmt.Sprintf("%v/%v/%v", os.Getenv("HOME"), ".kube", "config"), "(optional) absolute path to the kubeconfig file")
       flag.Parse()
       config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
       if err != nil {
           fmt.Println(err)
           return
       }
       // make our work easier to find in the audit_event queries
       config.UserAgent = "live-test-writing"
       // creates the clientset
       ClientSet, _ := kubernetes.NewForConfig(config)
       // DynamicClientSet, _ := dynamic.NewForConfig(config)
       // podResource := schema.GroupVersionResource{Group: "", Version: "v1", Resource: "pods"}

       testNamespaceName := "default"
       testServiceAccountName := "testserviceaccount"
       testSecretName := "testsecret"

       fmt.Println("creating a ServiceAccount")
       testServiceAccount := v1.ServiceAccount{
           ObjectMeta: metav1.ObjectMeta{
               Name: testServiceAccountName,
               Labels: map[string]string{"test-serviceaccount-static": "true"},
           },
       }
       _, err = ClientSet.CoreV1().ServiceAccounts(testNamespaceName).Create(&testServiceAccount)
       if err != nil {
          fmt.Println(err, "failed to create a ServiceAccount")
          return
       }

       fmt.Println("creating a Secret")
       testSecret := v1.Secret{
           ObjectMeta: metav1.ObjectMeta{
               Name: testSecretName,
           },
           Data: map[string][]byte{
               "test-field": []byte("test-value"),
           },
           Type: "Opaque",
       }
       _, err = ClientSet.CoreV1().Secrets(testNamespaceName).Create(&testSecret)
       if err != nil {
          fmt.Println(err, "failed to create a Secret")
          return
       }

       fmt.Println("patching the ServiceAccount")
       testServiceAccountPatchData, err := json.Marshal(map[string]interface{}{
           "secrets": []map[string]interface{}{{
               "name": testSecretName,
           }},
       })
       if err != nil {
          fmt.Println(err, "failed to marshal JSON patch for the ServiceAccount")
          return
       }
       _, err = ClientSet.CoreV1().ServiceAccounts(testNamespaceName).Patch(testServiceAccountName, types.StrategicMergePatchType, []byte(testServiceAccountPatchData))
       if err != nil {
          fmt.Println(err, "failed to patch the ServiceAccount")
          return
       }

       fmt.Println("creating a ServiceAccountToken")
       tokenExpirySeconds := int64(10000)
       serviceAccountToken := authenticationv1.TokenRequest{
           Spec: authenticationv1.TokenRequestSpec{
               ExpirationSeconds: &tokenExpirySeconds,
	             Audiences: []string{testServiceAccountName},
           },
       }
       _, err = ClientSet.CoreV1().ServiceAccounts(testNamespaceName).CreateToken(testServiceAccountName, &serviceAccountToken)
       if err != nil {
          fmt.Println(err, "failed to create the ServiceAccountToken")
          return
       }

       fmt.Println("finding ServiceAccount in list of all ServiceAccounts (by LabelSelector)")
       serviceAccountList, err := ClientSet.CoreV1().ServiceAccounts("").List(metav1.ListOptions{LabelSelector: "test-serviceaccount-static=true"})
       foundServiceAccount := false
       for _, serviceAccountItem := range serviceAccountList.Items {
           if serviceAccountItem.ObjectMeta.Name == testServiceAccountName && serviceAccountItem.ObjectMeta.Namespace == testNamespaceName && serviceAccountItem.Secrets[0].Name == testSecretName {
               foundServiceAccount = true
               fmt.Println(serviceAccountItem)
               break
           }
       }
       if foundServiceAccount != true {
          fmt.Println(err, "failed to find the created ServiceAccount")
          return
       }

       fmt.Println("deleting the ServiceAccount")
       err = ClientSet.CoreV1().ServiceAccounts(testNamespaceName).DeleteCollection(&metav1.DeleteOptions{}, metav1.ListOptions{})
       if err != nil {
          fmt.Println(err, "failed to delete the ServiceAccount by Collection")
          return
       }

       fmt.Println("deleting the Secret")
       err = ClientSet.CoreV1().Secrets(testNamespaceName).Delete(testSecretName, &metav1.DeleteOptions{})
       if err != nil {
          fmt.Println(err, "failed to delete the Secret")
          return
       }

       fmt.Println("[status] complete")

     }
   #+end_src

   #+RESULTS:
   #+begin_src go
   creating a ServiceAccount
   creating a Secret
   patching the ServiceAccount
   creating a ServiceAccountToken
   the server could not find the requested resource failed to create the ServiceAccountToken
   #+end_src

* Verifying increase it coverage with APISnoop                       :export:
Discover useragents:
  #+begin_src sql-mode :eval never-export :exports both :session none
    select distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%' and useragent like 'live%';
  #+end_src

  #+RESULTS:
  #+begin_SRC example
       useragent     
  -------------------
   live-test-writing
  (1 row)

  #+end_SRC

List endpoints hit by the test:
#+begin_src sql-mode :exports both :session none
select * from endpoints_hit_by_new_test where useragent like 'live%'; 
#+end_src

#+RESULTS:
#+begin_SRC example
     useragent     |                  operation_id                  | hit_by_ete | hit_by_new_test 
-------------------+------------------------------------------------+------------+-----------------
 live-test-writing | createCoreV1NamespacedSecret                   | t          |               2
 live-test-writing | createCoreV1NamespacedServiceAccount           | t          |               2
 live-test-writing | deleteCoreV1CollectionNamespacedServiceAccount | f          |               2
 live-test-writing | deleteCoreV1NamespacedSecret                   | t          |               2
 live-test-writing | listCoreV1ServiceAccountForAllNamespaces       | f          |               1
 live-test-writing | patchCoreV1NamespacedServiceAccount            | f          |               2
(6 rows)

#+end_SRC

Display endpoint coverage change:
  #+begin_src sql-mode :eval never-export :exports both :session none
    select * from projected_change_in_coverage;
  #+end_src

  #+RESULTS:
  #+begin_SRC example
     category    | total_endpoints | old_coverage | new_coverage | change_in_number 
  ---------------+-----------------+--------------+--------------+------------------
   test_coverage |             445 |          195 |          198 |                3
  (1 row)

  #+end_SRC

  
  
* Final notes :export:
If a test with these calls gets merged, **test coverage will go up by 3 points**

This test is also created with the goal of conformance promotion.

-----  
/sig testing  

/sig architecture  

/area conformance  

* Options :neverexport:
** Delete all events after postgres initialization
   #+begin_src sql-mode :eval never-export :exports both :session none
   delete from raw_audit_event where bucket = 'apisnoop' and job='live';
   #+end_src

   #+RESULTS:
   #+begin_SRC example
   DELETE 396
   #+end_SRC

* Open Tasks
  Set any open tasks here, using org-todo
** DONE Live Your Best Life
* Footnotes                                                     :neverexport:
  :PROPERTIES:
  :CUSTOM_ID: footnotes
  :END:
