# -*- ii: apisnoop; -*-
#+TITLE: Replicasets List and DeleteCollection endpoints
#+AUTHOR: ii team
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | DONE(d)
#+OPTIONS: toc:nil tags:nil todo:nil
#+EXPORT_SELECT_TAGS: export
#+PROPERTY: header-args:sql-mode :product postgres


* TODO Progress [2/6]                                                :export:
- [x] APISnoop org-flow :
- [x] test approval issue : #
- [X] test pr : #
- [ ] two weeks soak start date :
- [ ] two weeks soak end date :
- [ ] test promotion pr : kubernetes/kubernetes #

* Identifying an untested feature Using APISnoop                     :export:

According to this APIsnoop query, there are still some remaining ReplicaSet endpoints which are untested.

  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode :eval never-export :exports both :session none
    SELECT
      endpoint,
      -- k8s_action,
      -- path,
      -- description,
      kind
      FROM testing.untested_stable_endpoint
      where eligible is true
        and endpoint like '%ReplicaSet%'
        and endpoint not like '%Status%'
      order by kind, endpoint desc
      limit 25;
  #+end_src

  #+RESULTS: untested_stable_core_endpoints
  #+begin_SRC example
                    endpoint                  |    kind
  --------------------------------------------+------------
   listAppsV1ReplicaSetForAllNamespaces       | ReplicaSet
   deleteAppsV1CollectionNamespacedReplicaSet | ReplicaSet
  (2 rows)

  #+end_SRC


* API Reference and feature documentation                            :export:
- [[https://kubernetes.io/docs/reference/kubernetes-api/][Kubernetes API Reference Docs]]
- [[https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/apps/v1/replicaset.go][Client-go - ReplicaSet]]
- [[https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/replica-set-v1/][workloads-resources/replica-set-v1]]

* The mock test                                                      :export:
** Test outline
1. Create a ReplicaSet
2. List all Replicasets
3. DeleteCollection of ReplicaSets
4. Varify the ReplicaSets have been deleted

** Test the functionality in Go
Using an existing conformance test as a template for a [[https://github.com/ii/kubernetes/blob/Riaankl-replicaset-list-deletecollection/test/e2e/apps/replica_set.go#L505-L545][new ginkgo test]] which validates that two new endpoints are hit.

* Verifying increase in coverage with APISnoop                       :export:

*** Test to see is new endpoint was hit by the test
#+begin_src sql-mode :eval never-export :exports both :session none
  select distinct  endpoint, useragent
  from testing.audit_event
  where endpoint ilike '%ReplicaSet%'
  and useragent like '%ReplicaSet%'
  order by endpoint
  limit 100;

#+end_src

#+RESULTS:
#+begin_SRC example
                  endpoint                  |                                                          useragent
--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------
 createAppsV1NamespacedReplicaSet           | e2e.test/v0.0.0 (linux/amd64) kubernetes/$Format -- [sig-apps] ReplicaSet should list and delete a collection of ReplicaSets
 deleteAppsV1CollectionNamespacedReplicaSet | e2e.test/v0.0.0 (linux/amd64) kubernetes/$Format -- [sig-apps] ReplicaSet should list and delete a collection of ReplicaSets
 listAppsV1ReplicaSetForAllNamespaces       | e2e.test/v0.0.0 (linux/amd64) kubernetes/$Format -- [sig-apps] ReplicaSet should list and delete a collection of ReplicaSets
 readAppsV1NamespacedReplicaSet             | e2e.test/v0.0.0 (linux/amd64) kubernetes/$Format -- [sig-apps] ReplicaSet should list and delete a collection of ReplicaSets
(4 rows)

#+end_SRC


* Final notes                                                        :export:
If a test with these calls gets merged, **test coverage will go up by 2 points**

This test is also created with the goal of conformance promotion.

-----
/sig apps
/sig testing
/sig architecture
/area conformance


* scratch

*** Delete audit events to check for success

**** Count all audit events
#+begin_src sql-mode
select count(*) from testing.audit_event;
#+end_src

#+RESULTS:
#+begin_SRC example
 count
-------
 12684
(1 row)

#+end_SRC



**** Delete all audit events
#+begin_src sql-mode
delete from testing.audit_event;
#+end_src

#+RESULTS:
#+begin_SRC example
DELETE 0
#+end_SRC
