# -*- ii: apisnoop; -*-
#+TITLE: Endpoints to not test
#+AUTHOR: Caleb Woodbine <caleb@ii.coop>

Evaluate and describe which endpoints are not fit for conformance from from "untested_stable_endpoints" and not just "untested_stable_core_endpoints"

* WIP Endpoints by group 
This is a list sorted by group which should not be tested.

** All Endpoints
*** Volumes
    Reason: vendoring
  #+name: Volumes
  #+begin_src sql-mode :eval never-export :exports both :session none
    select
      operation_id,
      k8s_action,
      path,
      -- description,
      kind
     -- from untested_stable_core_endpoints
       from untested_stable_endpoints
      where path like '%volume%'
      -- and kind like ''
      -- and operation_id ilike '%%'
     order by kind,operation_id desc
     -- limit 25
           ;
  #+end_src

  #+RESULTS: Volumes
  #+begin_SRC example
                       operation_id                      |    k8s_action    |                                path                                 |         kind          
  -------------------------------------------------------+------------------+---------------------------------------------------------------------+-----------------------
   replaceCoreV1PersistentVolumeStatus                   | put              | /api/v1/persistentvolumes/{name}/status                             | PersistentVolume
   replaceCoreV1PersistentVolume                         | put              | /api/v1/persistentvolumes/{name}                                    | PersistentVolume
   readCoreV1PersistentVolumeStatus                      | get              | /api/v1/persistentvolumes/{name}/status                             | PersistentVolume
   patchCoreV1PersistentVolumeStatus                     | patch            | /api/v1/persistentvolumes/{name}/status                             | PersistentVolume
   patchCoreV1PersistentVolume                           | patch            | /api/v1/persistentvolumes/{name}                                    | PersistentVolume
   deleteCoreV1CollectionPersistentVolume                | deletecollection | /api/v1/persistentvolumes                                           | PersistentVolume
   replaceCoreV1NamespacedPersistentVolumeClaimStatus    | put              | /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status | PersistentVolumeClaim
   readCoreV1NamespacedPersistentVolumeClaimStatus       | get              | /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status | PersistentVolumeClaim
   patchCoreV1NamespacedPersistentVolumeClaimStatus      | patch            | /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status | PersistentVolumeClaim
   patchCoreV1NamespacedPersistentVolumeClaim            | patch            | /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}        | PersistentVolumeClaim
   listCoreV1PersistentVolumeClaimForAllNamespaces       | list             | /api/v1/persistentvolumeclaims                                      | PersistentVolumeClaim
   deleteCoreV1CollectionNamespacedPersistentVolumeClaim | deletecollection | /api/v1/namespaces/{namespace}/persistentvolumeclaims               | PersistentVolumeClaim
   replaceStorageV1VolumeAttachmentStatus                | put              | /apis/storage.k8s.io/v1/volumeattachments/{name}/status             | VolumeAttachment
   replaceStorageV1VolumeAttachment                      | put              | /apis/storage.k8s.io/v1/volumeattachments/{name}                    | VolumeAttachment
   readStorageV1VolumeAttachmentStatus                   | get              | /apis/storage.k8s.io/v1/volumeattachments/{name}/status             | VolumeAttachment
   patchStorageV1VolumeAttachmentStatus                  | patch            | /apis/storage.k8s.io/v1/volumeattachments/{name}/status             | VolumeAttachment
   patchStorageV1VolumeAttachment                        | patch            | /apis/storage.k8s.io/v1/volumeattachments/{name}                    | VolumeAttachment
   listStorageV1VolumeAttachment                         | list             | /apis/storage.k8s.io/v1/volumeattachments                           | VolumeAttachment
   deleteStorageV1VolumeAttachment                       | delete           | /apis/storage.k8s.io/v1/volumeattachments/{name}                    | VolumeAttachment
   deleteStorageV1CollectionVolumeAttachment             | deletecollection | /apis/storage.k8s.io/v1/volumeattachments                           | VolumeAttachment
   createStorageV1VolumeAttachment                       | post             | /apis/storage.k8s.io/v1/volumeattachments                           | VolumeAttachment
  (21 rows)

  #+end_SRC
  #+end_SRC

*** ComponentStatus
    Reason: possible inconsistencies between clusters
  #+name: ComponentStatus
  #+begin_src sql-mode :eval never-export :exports both :session none
    select
      operation_id,
      k8s_action,
      path,
      -- description,
      kind
      --from untested_stable_core_endpoints
       from untested_stable_endpoints
      where kind like 'ComponentStatus'
      -- and operation_id ilike '%%'
     order by kind,operation_id desc
     -- limit 25
           ;
  #+end_src

  #+RESULTS: ComponentStatus
  #+begin_SRC example
         operation_id        | k8s_action |               path               |      kind       
  ---------------------------+------------+----------------------------------+-----------------
   readCoreV1ComponentStatus | get        | /api/v1/componentstatuses/{name} | ComponentStatus
   listCoreV1ComponentStatus | list       | /api/v1/componentstatuses        | ComponentStatus
  (2 rows)

  #+end_SRC

  #+end_SRC

*** Node
    Note: only includes Create and Delete (as currently aware)
    Reason: node registration is handled by the kubelet / node
  #+name: Node
  #+begin_src sql-mode :eval never-export :exports both :session none
    select
      operation_id,
      k8s_action,
      path,
      -- description,
      kind
      --from untested_stable_core_endpoints
       from untested_stable_endpoints
      where kind like 'Node'
        and (
          k8s_action like 'delete'
        or
          k8s_action like 'post'
        )
      -- and operation_id ilike '%%'
     order by kind,operation_id desc
     -- limit 25
           ;
  #+end_src

  #+RESULTS: Node
  #+begin_SRC example
     operation_id   | k8s_action |         path         | kind 
  ------------------+------------+----------------------+------
   deleteCoreV1Node | delete     | /api/v1/nodes/{name} | Node
   createCoreV1Node | post       | /api/v1/nodes        | Node
  (2 rows)

  #+end_SRC

* Links and references
- [[https://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/writing-good-conformance-tests.md][Writing Good Conformance Tests for Kubernetes]]
- [[https://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/writing-good-e2e-tests.md][Writing good e2e tests for Kubernetes]]
