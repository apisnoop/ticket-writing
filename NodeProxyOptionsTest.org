# -*- ii: apisnoop; -*-
#+TITLE: Write NodeProxyOptions Mock Test
#+AUTHOR: Stephen Heywood
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | DONE(d)
#+OPTIONS: toc:nil tags:nil todo:nil
#+EXPORT_SELECT_TAGS: export

* TODO Progress [1/6]                                                :export:
- [X] APISnoop org-flow : [[https://github.com/cncf/apisnoop/blob/master/tickets/k8s/NodeProxyOptionsTest.org][NodeProxyOptionsTest.org]]
- [ ] test approval issue : [[https://github.com/kubernetes/kubernetes/issues/][kubernetes/kubernetes#]]
- [ ] test pr : kuberenetes/kubernetes#
- [ ] two weeks soak start date : testgrid-link
- [ ] two weeks soak end date :
- [ ] test promotion pr : kubernetes/kubernetes#?
* Identifying an untested feature Using APISnoop                     :export:

According to this APIsnoop query, there are still some remaining NodeProxyOptions endpoints which are untested.

  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode :eval never-export :exports both :session none
    SELECT
      endpoint,
      path,
      description,
      kind
    FROM untested_stable_endpoint
    WHERE category = 'core'
      and kind like 'NodeProxyOptions'
      and endpoint like '%Proxy'
    ORDER BY kind,endpoint desc
    LIMIT 25
    ;
  #+end_src

  #+RESULTS: untested_stable_core_endpoints
  #+begin_SRC example
             endpoint            |            path            |                description                |       kind
  -------------------------------+----------------------------+-------------------------------------------+------------------
   connectCoreV1PutNodeProxy     | /api/v1/nodes/{name}/proxy | connect PUT requests to proxy of Node     | NodeProxyOptions
   connectCoreV1PostNodeProxy    | /api/v1/nodes/{name}/proxy | connect POST requests to proxy of Node    | NodeProxyOptions
   connectCoreV1PatchNodeProxy   | /api/v1/nodes/{name}/proxy | connect PATCH requests to proxy of Node   | NodeProxyOptions
   connectCoreV1OptionsNodeProxy | /api/v1/nodes/{name}/proxy | connect OPTIONS requests to proxy of Node | NodeProxyOptions
   connectCoreV1HeadNodeProxy    | /api/v1/nodes/{name}/proxy | connect HEAD requests to proxy of Node    | NodeProxyOptions
   connectCoreV1GetNodeProxy     | /api/v1/nodes/{name}/proxy | connect GET requests to proxy of Node     | NodeProxyOptions
   connectCoreV1DeleteNodeProxy  | /api/v1/nodes/{name}/proxy | connect DELETE requests to proxy of Node  | NodeProxyOptions
  (7 rows)

  #+end_SRC

The current behaviour of these endpoints is to redirect the client to their related =NodeProxyWithPath= endpoints.
The reasons for this action are listed in the following issue: [[https://github.com/kubernetes/kubernetes/issues/4958][Apiserver proxy requires a trailing slash #4958]].

* API Reference and feature documentation                            :export:
- [[https://kubernetes.io/docs/reference/kubernetes-api/][Kubernetes API Reference Docs]]
- [[https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#-strong-proxy-operations-node-v1-core-strong-][Kubernetes API: v1.19 Node v1 core Proxy Operation]]
- [[https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/][client-go]]

* The mock test                                                      :export:
** Test outline

1. Retrive a list of nodes in the cluster and then locate the name of the first node in the list.

2. Create a http.Client that checks for a redirect so that status code can be checked.

3. Loop through all http verbs, testing that the node proxy endpoint returns the required 301 status code.

** Test the functionality in Go

- [[https://github.com/ii/kubernetes/blob/proxy-node-redirect/test/e2e/network/proxy.go#L265-L303][e2e test: "proxy connection returns a series of 301 redirections for a node"]]

* Verifying increase in coverage with APISnoop                       :export:
** Discover useragents:

  #+begin_src sql-mode :eval never-export :exports both :session none
    select distinct useragent from audit_event where bucket='apisnoop' and useragent not like 'kube%' and useragent not like 'coredns%' and useragent not like 'kindnetd%' and useragent like 'live%';
  #+end_src

** List endpoints hit by the test:

  #+begin_src sql-mode :exports both :session none
    select * from endpoints_hit_by_new_test where useragent like 'live%';
  #+end_src

** Display endpoint coverage change:

  #+begin_src sql-mode :eval never-export :exports both :session none
    select * from projected_change_in_coverage;
  #+end_src

* Convert to Ginkgo Test
** Ginkgo Test
  :PROPERTIES:
  :ID:       gt001z4ch1sc00l
  :END:
* Final notes                                                        :export:

If a test with these calls gets merged, **test coverage will go up by 7 points**

This test is also created with the goal of conformance promotion.

-----
/sig testing

/sig architecture

/area conformance
