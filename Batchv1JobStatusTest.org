# -*- ii: apisnoop; -*-
#+TITLE: BatchV1 Job Status Test - +3
#+AUTHOR: ii team
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | DONE(d)
#+OPTIONS: toc:nil tags:nil todo:nil
#+EXPORT_SELECT_TAGS: export
#+PROPERTY: header-args:sql-mode :product postgres


* TODO Progress [1/6]                                                :export:
- [X] APISnoop org-flow: [[https://github.com/apisnoop/ticket-writing/blob/master/Batchv1JobStatusTest.org][Batchv1JobStatusTest.org]]
- [ ] Test approval issue : [[https://issues.k8s.io/][#]]
- [ ] Test PR : [[https://pr.k8s.io/][!]]
- [ ] Two weeks soak start date : [[https://testgrid.k8s.io/][testgrid-link]]
- [ ] Two weeks soak end date : xxxx-xx-xx
- [ ] Test promotion PR : [[https://pr.k8s.io/][!]]

* Identifying an untested feature Using APISnoop                     :export:

According to this APIsnoop query, there are still some remaining Job status endpoints which are untested.

  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode :eval never-export :exports both :session none
    SELECT
      endpoint,
      path,
      kind
      FROM testing.untested_stable_endpoint
      where eligible is true
      and endpoint ilike '%JobStatus'
      order by kind, endpoint desc
      limit 10;
  #+end_src

  #+RESULTS: untested_stable_core_endpoints
  #+begin_SRC example
               endpoint              |                           path                           | kind
  -----------------------------------+----------------------------------------------------------+------
   replaceBatchV1NamespacedJobStatus | /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status | Job
   readBatchV1NamespacedJobStatus    | /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status | Job
   patchBatchV1NamespacedJobStatus   | /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status | Job
  (3 rows)

  #+end_SRC

* API Reference and feature documentation                            :export:
- [[https://kubernetes.io/docs/reference/kubernetes-api/][Kubernetes API Reference Docs]]
- [[https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/][Kubernetes API / Workload Resources / Job]]
- [[https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/batch/v1/job.go][client-go - Job]]

* Research                                                           :export:
** Locating current e2e test for similar endpoints

There are conformance tests for CronJob status endpoints already

#+begin_src sql-mode :eval never-export :exports both :session none
select distinct  endpoint, right(useragent,59) AS useragent
from public.audit_event
where endpoint ilike '%JobStatus%'
and useragent ilike '%Conformance%'
order by endpoint
limit 10;
#+end_src

#+RESULTS:
#+begin_SRC example
               endpoint                |                          useragent
---------------------------------------+-------------------------------------------------------------
 patchBatchV1NamespacedCronJobStatus   | CronJob should support CronJob API operations [Conformance]
 readBatchV1NamespacedCronJobStatus    | CronJob should support CronJob API operations [Conformance]
 replaceBatchV1NamespacedCronJobStatus | CronJob should support CronJob API operations [Conformance]
(3 rows)

#+end_SRC

- [[https://github.com/kubernetes/kubernetes/blob/master/test/e2e/apps/cronjob.go#L306-L462]]

#+begin_src
framework.ConformanceIt("should support CronJob API operations", func() {
#+end_src

* The mock test                                                      :export:
** Test outline
1.

2.

3.

4.

5.

** Test the functionality in Go

* Verifying increase in coverage with APISnoop                       :export:
** Listing endpoints hit by the new e2e test

This query shows the endpoints hit within a short period of running the e2e test

#+begin_src sql-mode :eval never-export :exports both :session none
select distinct  endpoint, right(useragent,63) AS useragent
from testing.audit_event
where endpoint ilike '%JobStatus%'
and release_date::BIGINT > round(((EXTRACT(EPOCH FROM NOW()))::numeric)*1000,0) - 60000
and useragent like 'e2e%should%'
order by endpoint
limit 10;
#+end_src

#+RESULTS:
#+begin_SRC example
 endpoint | useragent
----------+-----------
(0 rows)

#+end_SRC

* Final notes                                                        :export:

If a test with these calls gets merged, *test coverage will go up by 3 points*

This test is also created with the goal of conformance promotion.

-----  
/sig testing  

/sig architecture  

/area conformance  

* Options                                                       :neverexport:
** Delete all events after postgres initialization
   #+begin_src sql-mode :eval never-export :exports both :session none
   delete from audit_event where bucket = 'apisnoop' and job='live';
   #+end_src

* Footnotes                                                     :neverexport:
  :PROPERTIES:
  :CUSTOM_ID: footnotes
  :END:

