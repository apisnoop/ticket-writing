# -*- ii: apisnoop; -*-
#+TITLE: ReplicaSetiLifeCycle Test
#+AUTHOR: ii team
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(b) | DONE(d)
#+OPTIONS: toc:nil tags:nil todo:nil
#+EXPORT_SELECT_TAGS: export
#+PROPERTY: header-args:sql-mode :product postgres

* TODO Progress [2/5]                                                :export:
- [X] APISnoop org-flow : [[https://github.com/cncf/apisnoop/blob/master/tickets/k8s/][ReplicaSetScaleTest.org]]
- [X] test approval issue : [[https://github.com/kubernetes/kubernetes/issues/][kubernetes/kubernetes#]]
- [ ] test pr : kuberenetes/kubernetes#
- [ ] two weeks soak start date : testgrid-link
- [ ] two weeks soak end date :
- [ ] test promotion pr : kubernetes/kubernetes#?
* Identifying an untested feature Using APISnoop                     :export:

According to this APIsnoop query, there are still some remaining RESOURCENAME endpoints which are untested.

with this query you can filter untested endpoints by their category and eligiblity for conformance.
e.g below shows a query to find all conformance eligible untested,stable,core endpoints

  #+NAME: untested_stable_core_endpoints
  #+begin_src sql-mode :eval never-export :exports both :session none
    SELECT
      endpoint,
      -- k8s_action,
      -- path,
      -- description,
      kind
      FROM testing.untested_stable_endpoint
      where eligible is true
      and endpoint like '%ReplicaSet%'
        and endpoint not like '%Status%'
      --and category = 'core'
      order by kind, endpoint desc
      limit 25;
  #+end_src

 #+RESULTS: untested_stable_core_endpoints
 #+begin_SRC example
                   endpoint                  |    kind
 --------------------------------------------+------------
  patchAppsV1NamespacedReplicaSet            | ReplicaSet
  listAppsV1ReplicaSetForAllNamespaces       | ReplicaSet
  deleteAppsV1CollectionNamespacedReplicaSet | ReplicaSet
 (3 rows)

 #+end_SRC

* API Reference and feature documentation                            :export:
- [[https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#-strong-write-operations-replicaset-v1-apps-strong-][Kubernetes API Reference Docs]]
- [[https://pkg.go.dev/k8s.io/kubernetes/test/e2e/framework/replicaset][client-go - ReplicaSet]]

* The mock test                                                     :export:
** Test outline
1. Create a ReplicaSet with a static label

2. Read the ReplicaSet

3. Scale the  ReplicaSet to 2

4. Patch the ReplicaSetScale

5. Read the replicaSet to ensure it is Patch

6. Delete the Namespace and ReplicaSet


*** Test the function in Go
Due to the complexity of setting up the resources for APIService we have used the current e2e test as template. It has been extended in a [[https://github.com/ii/kubernetes/commit/4c95e25f7acfe0e755d535c65fa2d10e852a1cd0][new ginkgo test]] for review.


* Verifying increase coverage with APISnoop                         :export:


#+begin_src sql-mode :eval never-export :exports both :session none
  select distinct  endpoint, useragent
                   -- to_char(to_timestamp(release_date::bigint), ' HH:MI') as time
  from testing.audit_event
  where endpoint ilike '%ReplicaSet%'
  and useragent ilike '%ReplicaSet lifecycle tests%'
  -- and release_date::BIGINT > round(((EXTRACT(EPOCH FROM NOW()))::numeric)*1000,0) - 60000
  -- and useragent like 'kubectl%'
  order by endpoint
  limit 100;

#+end_src

#+RESULTS:
#+begin_SRC example
             endpoint              |                                              useragent
-----------------------------------+------------------------------------------------------------------------------------------------------
 createAppsV1NamespacedReplicaSet  | e2e.test/v0.0.0 (linux/amd64) kubernetes/$Format -- [sig-apps] ReplicaSet ReplicaSet lifecycle tests
 patchAppsV1NamespacedReplicaSet   | e2e.test/v0.0.0 (linux/amd64) kubernetes/$Format -- [sig-apps] ReplicaSet ReplicaSet lifecycle tests
 readAppsV1NamespacedReplicaSet    | e2e.test/v0.0.0 (linux/amd64) kubernetes/$Format -- [sig-apps] ReplicaSet ReplicaSet lifecycle tests
 replaceAppsV1NamespacedReplicaSet | e2e.test/v0.0.0 (linux/amd64) kubernetes/$Format -- [sig-apps] ReplicaSet ReplicaSet lifecycle tests
(4 rows)

#+end_SRC
















* Convert to Ginkgo Test
** Ginkgo Test
  :PROPERTIES:
  :ID:       gt001z4ch1sc00l
  :END:
* Final notes                                                        :export:
If a test with these calls gets merged, **test coverage will go up by 2 points**

This test is also created with the goal of conformance promotion.

-----
/sig testing
/sig architecture
/sig apps
/area conformance


* scratch

*** Delete all audit events
#+begin_src sql-mode
delete from testing.audit_event;
#+end_src

#+RESULTS:
#+begin_SRC example
DELETE 375
#+end_SRC




*** Identify the test for an endpoint
#+begin_src sql-mode
select endpoint,
       unnest(tests) as test
  from endpoint_coverage
 where endpoint like '%replaceAppsV1NamespacedReplicaSet%'
    and endpoint not like '%alpha%'
    and endpoint not like '%beta%'
  -- and release = '1.19.0'
  group by endpoint, test, level, category;
#+end_src

#+RESULTS:
#+begin_SRC example
                endpoint                 |                                              test
-----------------------------------------+------------------------------------------------------------------------------------------------
 replaceAppsV1NamespacedReplicaSet       | [sig-apps] ReplicaSet should surface a failure condition on a common issue like exceeded quota
 replaceAppsV1NamespacedReplicaSet       |
 replaceAppsV1NamespacedReplicaSetScale  | [sig-apps] ReplicaSet Replicaset should have a working scale subresource
 replaceAppsV1NamespacedReplicaSetScale  |
 replaceAppsV1NamespacedReplicaSetStatus |
(5 rows)

#+end_SRC
